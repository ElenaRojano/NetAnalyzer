<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<% 
			js_file = File.open(File.join(TEMPLATES, 'ElGrapho.min.js')).read
			js_base64 = Base64.encode64(js_file)
		%>
		<script src="data:application/javascript;base64,<%= js_base64 %>" type="application/javascript"></script>
		<% 
			js_file = File.open(File.join(TEMPLATES, 'pako.min.js')).read
			js_base64 = Base64.encode64(js_file)
		%>
		<script src="data:application/javascript;base64,<%= js_base64 %>" type="application/javascript"></script>
		
		<style type="text/css">
			#container {
				margin: 10px;
			}
		</style>
	</head>
	<body>
		<div id="container"/>
		</div>
		<% 
			model = {nodes: [], edges: []} 
			if options[:layout] == 'forcedir'
				if options[:steps].nil?
					model[:steps] = 30
				else
					model[:steps] = options[:steps]
				end
			end
			groups_index = Hash.new(0)
			@reference_nodes.empty? ? add = 1 : add = 2 # If there are ref nodes, reserve group index 1 for them
			if options[:group] == 'layer'
				@nodes.each do |nodeID, node|
					groups_index[nodeID] = @layers.index(node.type) + add
				end
			else
				@group_nodes.values.each_with_index do |gr, i|
					gr.each do |gr_node|
						groups_index[gr_node] = i + add
					end
				end
			end
			nodesIndex = {}
			@edges.keys.each_with_index do |nodeID,i|
				nodesIndex[nodeID] = i
				@reference_nodes.include?(nodeID) ? group = 1 :	group = groups_index[nodeID]
				model[:nodes] << {group: group}
			end
			@edges.each do |source, targets|
				targets.each do |target|
					model[:edges] << {from: nodesIndex[source], to: nodesIndex[target]}
				end
			end
			network = Base64.strict_encode64(Zlib::Deflate.deflate(model.to_json))
		%>

		<script>
			let model = JSON.parse(pako.inflate(atob("<%= network %>"), { to: 'string' }));
			console.log(model)
		
			graph = new ElGrapho({
			  container: document.getElementById('container'),
			  <% if options[:layout] == 'hairball' %>
			     model: ElGrapho.layouts.Hairball(model),
			  <% elsif options[:layout] == 'forcedir' %>
			     model: ElGrapho.layouts.ForceDirected(model),
			  <% elsif options[:layout] == 'chord' %>
			  	 model: ElGrapho.layouts.Chord(model),
			  <% elsif options[:layout] == 'radial' %>
			  	 model: ElGrapho.layouts.RadialTree(model),			  	 
			  <% elsif options[:layout] == 'cl' %>
			  	 model: ElGrapho.layouts.Cluster(model),
			  <% end %>
			  darkMode: true,
			  debug: false,
			  nodeOutline: false,
			  glowBlend: 0.1,
			  width: 1500,
			  height: 1000,
			  nodeSize: 0.2,
			  edgeSize: 0.2
			});
		</script>
	</body>
</html>